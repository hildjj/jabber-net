<?xml version="1.0"?>
<doc>
    <assembly>
        <name>stringprep</name>
    </assembly>
    <members>
        <member name="T:stringprep.steps.BidiException">
            <summary>
            There was a problem with the Bidirection nature of a string to be prepped.
            </summary>
        </member>
        <member name="M:stringprep.steps.BidiException.#ctor(System.String)">
            <summary>
            Create a new BidiException
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:stringprep.steps.BidiStep">
            <summary>
            A stringprep profile step to check for Bidirectional correctness.  
            If the NO_BIDI flag is set, this is a no-op.
            </summary>
        </member>
        <member name="T:stringprep.steps.ProfileStep">
            <summary>
            Base class for steps in a stringprep profile.
            </summary>
        </member>
        <member name="M:stringprep.steps.ProfileStep.#ctor(System.String)">
            <summary>
            Create a named profile step, with no flags.
            </summary>
            <param name="name">The profile name</param>
        </member>
        <member name="M:stringprep.steps.ProfileStep.Prepare(System.Text.StringBuilder)">
            <summary>
            This is the workhorse function, to be implemented in each subclass.
            </summary>
            <param name="result">Result will be modified in place</param>
        </member>
        <member name="P:stringprep.steps.ProfileStep.Name">
            <summary>
            The name of the step.
            </summary>
        </member>
        <member name="M:stringprep.steps.BidiStep.#ctor">
            <summary>
            Create a new BidiStep.
            </summary>
        </member>
        <member name="M:stringprep.steps.BidiStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Perform BiDi checks.
            
            From RFC 3454, Section 6:
            In any profile that specifies bidirectional character handling, all
            three of the following requirements MUST be met:
            <ol>
            <li>The characters in section 5.8 MUST be prohibited.</li>
            <li>If a string contains any RandALCat character, the string MUST NOT
            contain any LCat character.</li>
            <li> If a string contains any RandALCat character, a RandALCat
            character MUST be the first character of the string, and a
            RandALCat character MUST be the last character of the string.</li>
            </ol>
            </summary>
            <param name="result">Result is modified in place.</param>
            <exception cref="T:stringprep.steps.BidiException">A BiDi problem exists</exception>
        </member>
        <member name="T:stringprep.steps.ProhibitStep">
            <summary>
            A stringprep profile step that checks for prohibited characters
            </summary>
        </member>
        <member name="M:stringprep.steps.ProhibitStep.#ctor(System.String)">
            <summary>
            Create an instance.
            </summary>
            <param name="tab">The prohibit table to be checked</param>
            <param name="name">The name of the step (for debugging purposes)</param>
        </member>
        <member name="M:stringprep.steps.ProhibitStep.Contains(System.Char)">
            <summary>
            Does this step prohibit the given character?
            </summary>
            <param name="c">The character to check</param>
            <returns>True if the character is prohibited</returns>
        </member>
        <member name="M:stringprep.steps.ProhibitStep.FindStringInTable(System.Text.StringBuilder)">
            <summary>
            Check all of the characters for prohbition.
            </summary>
            <param name="s">String to check</param>
            <returns>If one of the characters is prohibited, returns the index of that character.  
            If all are allowed, returns -1.</returns>
        </member>
        <member name="M:stringprep.steps.ProhibitStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Check for prohibited characters
            </summary>
            <param name="result">No modifications</param>
            <exception cref="T:stringprep.steps.ProhibitedCharacterException">Invalid character detected.</exception>
        </member>
        <member name="T:stringprep.steps.MapStep">
            <summary>
            A stringprep profile step to map one input character into 0 or more output characters.
            </summary>
        </member>
        <member name="M:stringprep.steps.MapStep.#ctor(System.String)">
            <summary>
            Create a MapStep that doesn't look at flags.
            </summary>
            <param name="tab">Mapping table</param>
            <param name="name">Name of the step</param>
        </member>
        <member name="M:stringprep.steps.MapStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Perform mapping for each character of input.
            </summary>
            <param name="result">Result is modified in place.</param>
        </member>
        <member name="T:stringprep.steps.NFKCStep">
            <summary>
            Perform Unicode Normalization Form KC.
            </summary>
        </member>
        <member name="M:stringprep.steps.NFKCStep.#ctor">
            <summary>
            Create an NFKC step.
            </summary>
        </member>
        <member name="M:stringprep.steps.NFKCStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Perform NFKC.  General overview: Decompose, Reorder, Compose
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:stringprep.steps.NFKCStep.CanonicalOrdering(System.Text.StringBuilder)">
            <summary>
            Reorder characters in the given range into their correct cannonical ordering with
            respect to combining class.
            </summary>
            <param name="buf">Buffer to reorder</param>
        </member>
        <member name="T:stringprep.steps.ProhibitedCharacterException">
            <summary>
            A character that is forbidden by the current stringprep profile exists in the input.
            </summary>
        </member>
        <member name="F:stringprep.steps.ProhibitedCharacterException.InvalidChar">
            <summary>
            The character that was invalid.
            </summary>
        </member>
        <member name="M:stringprep.steps.ProhibitedCharacterException.#ctor(stringprep.steps.ProfileStep,System.Char)">
            <summary>
            Create an instance.
            </summary>
            <param name="step">In which step did this occur?</param>
            <param name="c">The offending character</param>
        </member>
        <member name="M:stringprep.unicode.Combining.Class(System.Char)">
            <summary>
            What is the combining class for the given character?
            </summary>
            <param name="c">Character to look up</param>
            <returns>Combining class for this character</returns>
        </member>
        <member name="T:stringprep.unicode.Compose">
            <summary>
            Combine combining characters, where possible.
            Note: this is still Black Magic, as far as I can tell.
            </summary>
        </member>
        <member name="M:stringprep.unicode.Compose.Combine(System.Char,System.Char,System.Char@)">
            <summary>
            Combine two characters together, if possible.
            </summary>
            <param name="a">First character to combine</param>
            <param name="b">Second character to combine</param>
            <param name="result">The combined character, if method returns true.  Otherwise, undefined.</param>
            <returns>True if combination occurred</returns>
        </member>
        <member name="T:stringprep.unicode.Decompose">
            <summary>
            Decomposition data for NFKC.
            </summary>
        </member>
        <member name="M:stringprep.unicode.Decompose.Find(System.Char)">
            <summary>
            Look up the expansion, if any, for the given character.
            </summary>
            <param name="ch">The character to find</param>
            <returns>the expansion, or null if none found.</returns>
        </member>
        <member name="T:stringprep.Nameprep">
            <summary>
            RFC 3491, "nameprep" profile, for internationalized domain names.
            </summary>
        </member>
        <member name="T:stringprep.Profile">
            <summary>
            Summary description for Prep.
            </summary>
        </member>
        <member name="F:stringprep.Profile.B_1">
            <summary>
            RFC 3454, Appendix B.1
            </summary>
        </member>
        <member name="F:stringprep.Profile.B_2">
            <summary>
            RFC 3454, Appendix B.2
            </summary>
        </member>
        <member name="F:stringprep.Profile.B_3">
            <summary>
            RFC 3454, Appendix B.3
            </summary>
        </member>
        <member name="F:stringprep.Profile.C_1_1">
            <summary>
            RFC 3454, Appendix C.1.1
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_1_2">
            <summary>
            RFC 3454, Appendix C.1.2
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_2_1">
            <summary>
            RFC 3454, Appendix C.2.1
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_2_2">
            <summary>
            RFC 3454, Appendix C.2.2
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_3">
            <summary>
            RFC 3454, Appendix C.3
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_4">
            <summary>
            RFC 3454, Appendix C.4
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_5">
            <summary>
            RFC 3454, Appendix C.5
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_6">
            <summary>
            RFC 3454, Appendix C.6
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_7">
            <summary>
            RFC 3454, Appendix C.7
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_8">
            <summary>
            RFC 3454, Appendix C.8
            </summary>        
        </member>
        <member name="F:stringprep.Profile.C_9">
            <summary>
            RFC 3454, Appendix C.9
            </summary>        
        </member>
        <member name="F:stringprep.Profile.NFKC">
            <summary>
            RFC 3454, Section 4
            </summary>
        </member>
        <member name="F:stringprep.Profile.BIDI">
            <summary>
            RFC 3454, Section 6
            </summary>
        </member>
        <member name="F:stringprep.Profile.UNASSIGNED">
            <summary>
            RFC 3454, Section 7
            </summary>
        </member>
        <member name="M:stringprep.Profile.#ctor(stringprep.steps.ProfileStep[])">
            <summary>
            Create a new profile, with the given steps.
            </summary>
            <param name="profile">The steps to perform</param>
        </member>
        <member name="M:stringprep.Profile.Prepare(System.String)">
            <summary>
            Prepare a string, according to the specified profile.
            </summary>
            <param name="input">The string to prepare</param>
            <returns>The prepared string</returns>
        </member>
        <member name="M:stringprep.Profile.Prepare(System.Text.StringBuilder)">
            <summary>
            Prepare a string, according to the specified profile, in place.
            Not thread safe; make sure the input is locked, if appropriate.
            (this is the canonical version, that should be overriden by
            subclasses if necessary)
            </summary>
            <param name="result">The string to prepare in place</param>
        </member>
        <member name="M:stringprep.Nameprep.#ctor">
            <summary>
            Create a nameprep instance.
            </summary>
        </member>
        <member name="T:stringprep.Plain">
            <summary>
            A relatively plain stringprep profile, that doesn't do case folding, or prevent unassigned characters.
            </summary>
        </member>
        <member name="M:stringprep.Plain.#ctor">
            <summary>
            Create a Plain instance.
            </summary>
        </member>
        <member name="T:stringprep.XmppNode">
            <summary>
            A stringprep profile for draft-ietf-xmpp-nodeprep-02, for Jabber nodes (the "user" part).
            </summary>
        </member>
        <member name="M:stringprep.XmppNode.#ctor">
            <summary>
            Create a new XmppNode profile instance.
            </summary>
        </member>
        <member name="T:stringprep.XmppResource">
            <summary>
            A stringprep profile for draft-ietf-xmpp-resourceprep-02, used for Jabber resources.
            </summary>
        </member>
        <member name="M:stringprep.XmppResource.#ctor">
            <summary>
            Create an instance of an XmppResource
            </summary>
        </member>
    </members>
</doc>
